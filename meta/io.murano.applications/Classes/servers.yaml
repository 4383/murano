#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.


Namespaces:
  =: io.murano.applications
  res: io.murano.resources
  std: io.murano

--- # ------------------------------------------------------------------ # ---
# A replication group aggregating Servers
# Adds a logic to concurrently provision and unprovision servers


Name: ServerGroup
Extends:
  - ReplicationGroup

Properties:
  provider:
    Contract: $.class(ReplicaProvider).notNull()
  items:
    Usage: InOut
    Contract:
      - $.class(res:Instance)

Methods:
  .init:
    Body:
      - $this._env: $.find(std:Environment)

  deploy:
    Body:
      - $delta: $this.numItems - len($this.items)
      - If: abs($delta) > 1 and $this._env
        Then:
          - $verb: switch($delta > 0 => Creating, $delta < 0 => Removing)
          - $target: switch($delta > 0 => for, $delta < 0 => from)
          - If: name($this)
            Then:
              - $target: format(' {0} {1}', $target, name($this))
            Else:
              - $target: ''
          - $this._env.reporter.report($this, format('{0} {1} servers{2}', $verb, abs($delta), $target))


      - cast($this, ReplicationGroup).deploy()
      - $this.items.select($this._deployServer($))
      - $this.items.select($.endDeploy())

  _deployServer:
    Arguments:
      - server:
          Contract: $.class(res:Instance)
    Body:
      - If: $this._env and not $server.openstackId
        Then:
          - $this._env.reporter.report($this, 'Provisioning VM for ' + name($server) or $server.name)
      - $server.beginDeploy()

  .destroy:
    Body:
      - $this.items.select($.beginReleaseResources())
      - $this.items.select($.endReleaseResources())

--- # ------------------------------------------------------------------ # ---
# A replication provider acting as a default factory class for Servers

Name: ServerProvider
Extends: CloneReplicaProvider

Properties:
  source:
    Contract: $.class(res:Instance).notNull()

  serverNamePattern:
    Contract: $.string().notNull()


Methods:
  customizeTemplate:
    Arguments:
      - template:
          Contract: {}
      - index:
           Contract: $.int().notNull()
    Body:
      - $template.name: $this.serverNamePattern.format($index)
      - $ownerGroup: $this.find(ServerGroup)
      - If: $ownerGroup and name($ownerGroup)
        Then:
          - $groupName: format(' ({0})', name($ownerGroup))
        Else:
          - $groupName: ''
      - $template['?'].name: format('Server {0}{1}', $index, $groupName)
      - Return: $template

  releaseReplica:
    Arguments:
      - replica:
          Contract: $.class(res:Instance)
    Body:
      - $replica.beginReleaseResources()
