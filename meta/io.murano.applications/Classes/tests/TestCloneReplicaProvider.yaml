#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: io.murano.applications.tests
  tst: io.murano.test
  apps: io.murano.applications

--- # ------------------------------------------------------------------ # ---

Name: NestedCloneTarget
Properties:
  qux:
    Contract: $.string()

  quz:
    Contract: $.string()


--- # ------------------------------------------------------------------ # ---
Name: CloneTarget

Properties:
  name:
    Contract: $.string().notNull()
  foo:
    Contract: $.int().notNull()
  bar:
    Contract: $.class(NestedCloneTarget)



--- # ------------------------------------------------------------------ # ---
Name: DummyCloneProvider
Extends: apps:CloneReplicaProvider

Properties:
  source:
    Contract: $.class(CloneTarget).notNull()

--- # ------------------------------------------------------------------ # ---

Name: ParameterizedCloneProvider
Extends: DummyCloneProvider

Methods:
  customizeTemplate:
    Arguments:
      - template:
          Contract:
            $.string().notNull(): $
      - index:
           Contract: $.int().notNull()
    Body:
      - $template[name]: format('{0}-{1}', $template[name], $index)
      - Return: $template

--- # ------------------------------------------------------------------ # ---

Name: NestedParameterizedCloneProvider
Extends: ParameterizedCloneProvider

Methods:
  customizeTemplate:
    Arguments:
      - template:
          Contract:
            $.string().notNull(): $
      - index:
           Contract: $.int().notNull()
    Body:
      - $template: super($, $.customizeTemplate($template, $index)).first()
      - $template.bar[qux]: format('{0}-{1}', $template.bar.qux, $index*10)
      - Return: $template

--- # ------------------------------------------------------------------ # ---

Name: TestCloneReplicaProvider
Extends: tst:TestFixture

Methods:
  testCreateProvider:
    Body:
      - $this.assertTrue($this.createCloneProvider(:DummyCloneProvider) != null)

  testCreateSimpleReplica:
    Body:
      - $provider: $this.createCloneProvider(:DummyCloneProvider)
      - $replica: $provider.createReplica(1)
      - $this.assertTrue($replica is CloneTarget)
      - $this.assertTrue($replica.bar is NestedCloneTarget)
      - $this.assertEqual(instance, $replica.name)
      - $this.assertEqual(42, $replica.foo)
      - $this.assertEqual(hello, $replica.bar.qux)
      - $this.assertEqual(world, $replica.bar.quz)

  testCreateParameterizedReplica:
    Body:
      - $provider: $this.createCloneProvider(:ParameterizedCloneProvider)
      - $replica1: $provider.createReplica(1)
      - $replica2: $provider.createReplica(2)
      - $this.assertEqual('instance-1', $replica1.name)
      - $this.assertEqual('instance-2', $replica2.name)

  testCreateNestedParameterizedReplica:
    Body:
      - $provider: $this.createCloneProvider(:NestedParameterizedCloneProvider)
      - $replica1: $provider.createReplica(1)
      - $replica2: $provider.createReplica(2)
      - $this.assertEqual('instance-1', $replica1.name)
      - $this.assertEqual('instance-2', $replica2.name)

  createCloneProvider:
    Arguments:
      - type:
          Contract: $
    Body:
      - $model:
          $type:
            source:
              :CloneTarget:
                name: instance
                foo: 42
                bar:
                  :NestedCloneTarget:
                    qux: hello
                    quz: world
      - Return: new($model)
