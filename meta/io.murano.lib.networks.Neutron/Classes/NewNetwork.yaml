Namespaces:
  =: io.murano.lib.networks.neutron
  res: io.murano.resources
  std: io.murano
  sys: io.murano.system

Name: NewNetwork

Extends: res:Network

Properties:
  name:
    Contract: $.string().notNull()

  externalRouterId:
    Contract: $.string()
    Usage: InOut

  autoUplink:
    Contract: $.bool().notNull()
    Default: true

  autogenerateSubnet:
    Contract: $.bool().notNull()
    Default: true

  subnetCidr:
    Contract: $.string()
    Usage: InOut

  dnsNameserver:
    Contract: $.string()
    Usage: InOut

  useDefaultDns:
    Contract: $.bool().notNull()
    Default: true

Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()
      - $.netExplorer: new(sys:NetworkExplorer)

  deploy:
    Body:
      - $.ensureNetworkConfigured()
      - $.environment.instanceNotifier.untrackApplication($this)

  addHostToNetwork:
    Arguments:
      - instance:
          Contract: $.class(res:Instance).notNull()
      - assignFloatingIp:
          Contract: $.bool().notNull()
          Default: false
      - securityGroupName:
          Contract: $.string()
          Default: null
    Body:
      - $.ensureNetworkConfigured()
      - $portname: $instance.name + '-port-to-' + $.id()
      - $template:
          heat_template_version: '2013-05-23'
          resources:
            $portname:
              type: 'OS::Neutron::Port'
              properties:
                network_id: { get_resource: $.net_res_name }
                fixed_ips: [{ subnet_id: { get_resource: $.subnet_res_name } }]
                security_groups:
                  - get_resource: $securityGroupName
            $instance.name:
              properties:
                networks:
                  - port: { get_resource: $portname }
      - $.environment.stack.updateTemplate($template)

      - If: $assignFloatingIp
        Then:
          - $extNetId: $.netExplorer.getExternalNetworkIdForRouter($.externalRouterId)
          - If: $extNetId != null
            Then:
              - $fip_name: $instance.name + '-FloatingIP-' + $.id()
              - $template:
                  resources:
                    $fip_name:
                      type: 'OS::Neutron::FloatingIP'
                      properties:
                        floating_network_id: $extNetId
                    $instance.name + '-FloatingIpAssoc-' + $.id():
                      type: 'OS::Neutron::FloatingIPAssociation'
                      properties:
                        floatingip_id:
                          get_resource: $fip_name
                        port_id:
                          get_resource: $portname
                  outputs:
                    $instance.name + '-FloatingIPaddress':
                      value:
                        get_attr: [$fip_name, floating_ip_address]
                      description: Floating IP assigned
              - $.environment.stack.updateTemplate($template)

  ensureNetworkConfigured:
    Body:
      - If: !yaql "not bool($.getAttr(networkConfigured))"
        Then:
          - If: $.useDefaultDns and (not bool($.dnsNameserver))
            Then:
              - $.dnsNameserver: $.netExplorer.getDefaultDns()

          - $.net_res_name: $.name + '-net-' + $.id()
          - $.subnet_res_name: $.name + '-subnet-' + $.id()
          - $.createNetwork()
          - If: $.autoUplink and (not bool($.externalRouterId))
            Then:
              - $.externalRouterId: $.netExplorer.getDefaultRouter()
          - If: $.autogenerateSubnet and (not bool($.subnetCidr))
            Then:
              - $.subnetCidr: $.netExplorer.getAvailableCidr($.externalRouterId, $.id())
          - $.createSubnet()
          - If: !yaql "bool($.externalRouterId)"
            Then:
              - $.createRouterInterface()

          - $.environment.stack.push()
          - $.setAttr(networkConfigured, true)


  createNetwork:
    Body:
      - $template:
          heat_template_version: '2013-05-23'
          resources:
            $.net_res_name:
              type: 'OS::Neutron::Net'
              properties:
                name: $.name
      - $.environment.stack.updateTemplate($template)

  createSubnet:
    Body:
      - $template:
          heat_template_version: '2013-05-23'
          resources:
            $.subnet_res_name:
              type: 'OS::Neutron::Subnet'
              properties:
                network_id: { get_resource: $.net_res_name }
                ip_version: 4
                dns_nameservers: [ $.dnsNameserver ]
                cidr: $.subnetCidr
      - $.environment.stack.updateTemplate($template)

  createRouterInterface:
    Body:
      - $template:
          heat_template_version: '2013-05-23'
          resources:
            $.name + '-ri-' + $.id():
              type: 'OS::Neutron::RouterInterface'
              properties:
                router_id: $.externalRouterId
                subnet_id: { get_resource: $.subnet_res_name }
      - $.environment.stack.updateTemplate($template)
